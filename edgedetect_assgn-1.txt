from helper_functions import *

#-----------------------FILL IN THE FOLDER WHERE YOUR IMAGE EXISTS--------------------------

datafolder = 'images/'
imgpath = datafolder + "5.jpg"
#----------------------------------------STARTER CODE----------------------------------------
# Convert the color image to grayscale and returns the grayscale pixels 
pixel_values = read_colorimg(imgpath)
# The returned pixel values INCLUDE 2 boundary rows and 2 boundary colns. Therefore,
numb_rows = len(pixel_values) - 2
numb_colns = len(pixel_values[0]) - 2
#
#----------------------------------------WRITE YOUR CODE HERE----------------------------------------
# The data structure to store updated pixel information
new_pixel_values = [[0 for i in range(numb_colns)] for i in range(numb_rows)]
# 3 x 3 mask as a tuple of tuples
mask = ((-1,0,1), (-2,0,2), (-1,0,1))

# Implementing to  slice and image as a 2D list
def get_slice_2d_list(list_2d,x,y):
    return [row[y-1 : y+2] for row in list_2d[x-1 : x+2]]
# Implementing a function using 2D list
def flatten(itr):
    return [a for b in itr for a in b]

# For each of the pixel vaslues, excluding the boundary values
for i in range(1, numb_rows+1):
    for j in range(1, numb_colns+1):
    # Create little local 3x3 box using list slicing
        neighbour_pixels = get_slice_2d_list(pixel_values, i,j)
        flat_pix=flatten(neighbour_pixels)
        # Apply the flatten mask
        flat_mask=flatten(mask)
        mult_result = list(map(lambda a,b: a*b, flat_pix, flat_mask))
        # Sum all the multiplied values and set the new pixel value
        new_pixel_values[i-1][j-1]=sum(mult_result)
#        
#----------------------------------------END YOUR CODE HERE----------------------------------------
# Verify your result
verify_result(pixel_values, new_pixel_values, mask)
# View the original image and the edges of the image
view_images(imgpath, new_pixel_values)
